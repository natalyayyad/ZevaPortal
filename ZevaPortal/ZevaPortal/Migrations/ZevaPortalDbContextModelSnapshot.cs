// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZevaPortal.Models;

namespace ZevaPortal.Migrations
{
    [DbContext(typeof(ZevaPortalDbContext))]
    partial class ZevaPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ZevaPortal.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.HasKey("AssessmentId");

                    b.HasIndex("FormId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("ZevaPortal.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("CategoryId");

                    b.HasIndex("FormId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ZevaPortal.Models.ExtraInformation", b =>
                {
                    b.Property<int>("ExtraInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ExtraInformationId");

                    b.HasIndex("FormId");

                    b.ToTable("ExtraInformation");
                });

            modelBuilder.Entity("ZevaPortal.Models.FilledExtraInformation", b =>
                {
                    b.Property<int>("FilledExtraInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssessmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("FilledExtraInformationId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("FilledExtraInformation");
                });

            modelBuilder.Entity("ZevaPortal.Models.Form", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("text");

                    b.Property<string>("ReviewedFor")
                        .HasColumnType("text");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("ZevaPortal.Models.Guideline", b =>
                {
                    b.Property<int>("GuidelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<int>("ScaleFrom")
                        .HasColumnType("integer");

                    b.Property<int>("ScaleTo")
                        .HasColumnType("integer");

                    b.HasKey("GuidelineId");

                    b.HasIndex("FormId");

                    b.ToTable("Guidelines");
                });

            modelBuilder.Entity("ZevaPortal.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ZevaPortal.Models.ReviewedCategory", b =>
                {
                    b.Property<int>("ReviewedCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssessmentId")
                        .HasColumnType("integer");

                    b.Property<float>("Average")
                        .HasColumnType("real");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.HasKey("ReviewedCategoryId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("ReviewedCategories");
                });

            modelBuilder.Entity("ZevaPortal.Models.ReviewedQuestion", b =>
                {
                    b.Property<int>("ReviewedQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewedCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ReviewedQuestionId");

                    b.HasIndex("ReviewedCategoryId");

                    b.ToTable("ReviewedQuestions");
                });

            modelBuilder.Entity("ZevaPortal.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ZevaPortal.Models.Assessment", b =>
                {
                    b.HasOne("ZevaPortal.Models.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZevaPortal.Models.Category", b =>
                {
                    b.HasOne("ZevaPortal.Models.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZevaPortal.Models.ExtraInformation", b =>
                {
                    b.HasOne("ZevaPortal.Models.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZevaPortal.Models.FilledExtraInformation", b =>
                {
                    b.HasOne("ZevaPortal.Models.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZevaPortal.Models.Form", b =>
                {
                    b.HasOne("ZevaPortal.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZevaPortal.Models.Guideline", b =>
                {
                    b.HasOne("ZevaPortal.Models.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZevaPortal.Models.Question", b =>
                {
                    b.HasOne("ZevaPortal.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZevaPortal.Models.ReviewedCategory", b =>
                {
                    b.HasOne("ZevaPortal.Models.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZevaPortal.Models.ReviewedQuestion", b =>
                {
                    b.HasOne("ZevaPortal.Models.ReviewedCategory", "ReviewedCategory")
                        .WithMany()
                        .HasForeignKey("ReviewedCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
